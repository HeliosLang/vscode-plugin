{
  	"scopeName": "source.helios",
  	"patterns": [
		{
			"include": "#preheader"
		},
		{
			"include": "#header"
		},
		{
			"include": "#body"
		}
	],
	"repository": {
		"preheader": {
			"patterns": [
				{
					"begin": "\\a",
					"end": "(?=(minting|module|spending|staking|testing))",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"header": {
			"patterns": [
				{
					"begin": "(minting|module|spending|staking|testing)\\b",
					"beginCaptures": {
						"1": {"name": "keyword.other.scriptpurpose.helios"}
					},
					"end": "(?=([a-zA-Z][a-zA-Z0-9_]*\\b))",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"body": {
			"patterns": [
				{
					"begin": "[a-zA-Z][a-zA-Z0-9_]*\\b",
					"beginCaptures": {
						"0": {"name": "scriptname.helios"}
					},
					"end": "\\z",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#statements"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.helios",
					"match": "//.*"
				},
				{
					"name": "comment.block.helios",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"statements": {
			"patterns": [
				{
					"include": "#import"
				},
				{
					"include": "#const"
				},
				{
					"include": "#struct"
				},
				{
					"include": "#enum"
				},
				{
					"include": "#func-statement"
				}
			]
		},
		"import": {
			"name": "statement.import.helios",
			"begin": "\\b(import)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.other.import.helios"}
			},
			"end": "((\"[^\"]*\")|((?!from)[a-zA-Z][a-zA-Z_0-9]*\\b))",
			"endCaptures": {
				"2": {"name": "string.quoted.double.helios"},
				"3": {"name": "importedmodulename.helios"}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "\\{",
					"end": "}",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"match": "\\b(as)\\b",
							"name": "keyword.other.as.helios"
						},
						{
							"match": "[a-zA-Z][a-zA-Z0-9_]*",
							"name": "variable.other.import.helios"
						}
					]
				},
				{
					"match": "\\b(from)\\b",
					"name": "keyword.other.from.helios"
				}
			]
		},
		"const": {
			"name": "statement.const.helios",
			"begin": "\\b(const)\\b",
			"beginCaptures": {
				"1": {"name": "storage.type.const.helios"}
			},
			"end": "(?=(\\b(const|enum|func|import|struct)\\b))",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "[a-zA-Z][a-zA-Z0-9_]*",
					"beginCaptures": {
						"0": {"name": "variable.other.const.helios"}
					},
					"end": "(?=[=])",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"begin": ":",
							"beginCaptures": {
								"0": {"name": "keyword.operator.colon.helios"}
							},
							"end": "(?=[=])",
							"patterns": [
								{
									"include": "#comments"
								},
								{
									"include": "#types"
								}
							]
						}
					]
				},
				{
					"begin": "=",
					"beginCaptures": {
						"0": {"name": "keyword.operator.assignment.const.helios"}
					},
					"end": "(?=(\\b(const|enum|func|import|struct)\\b))",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#non-assignment"
						}
					]
				}
			]
		},
		"struct": {
			"name": "statement.struct.helios",
			"begin": "\\b(struct)\\b",
			"beginCaptures": {
				"1": {"name": "storage.struct.helios"}
			},
			"end": "}",
			"endCaptures": {
				"0": {"name": "group.braces.struct.helios"}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "[a-zA-Z][a-zA-Z0-9_]*",
					"beginCaptures": {
						"0": {"name": "entity.name.type.helios"}
					},
					"end": "(?=\\{)",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "\\{",
					"end": "(?=})",
					"name": "statement.struct.body.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#struct-field"
						},
						{
							"include": "#const"
						},
						{
							"include": "#func-statement"
						}
					]
				}
			]
		},
		"enum": {
			"name": "statement.enum.helios",
			"begin": "\\b(enum)\\b",
			"beginCaptures": {
				"1": {"name": "storage.enum.helios"}
			},
			"end": "}",
			"endCaptures": {
				"0": {"name": "group.braces.enum.helios"}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "[a-zA-Z][a-zA-Z0-9_]*",
					"beginCaptures": {
						"0": {"name": "entity.name.type.helios"}
					},
					"end": "(?=\\{)",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				},
				{
					"begin": "\\{",
					"end": "(?=})",
					"name": "statement.enum.body.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#enum-variant"
						},
						{
							"include": "#const"
						},
						{
							"include": "#func-statement"
						}
					]
				}
			]
		},
		"struct-field": {
			"patterns": [
				{
					"begin": ":",
					"beginCaptures": {
						"0": {"name": "keyword.operator.colon.helios"}
					},
					"end": "$",
					"name": "field.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"enum-variant": {
			"patterns": [
				{
					"begin": "([a-zA-Z][a-zA-Z0-9_]*)(?=\\s*\\{)",
					"beginCaptures": {
						"1": {"name": "enum.variant.name.helios"}
					},
					"end": "}",
					"endCaptures": {
						"0": {"name": "group.braces.enum-variant.helios"}
					},
					"patterns": [
						{
							"begin": "\\{",
							"end": "(?=})",
							"patterns": [
								{
									"include": "#struct-field"
								}
							]
						}
					]
				}
			]
		},
		"func-statement": {
			"name": "statement.func.helios",
			"begin": "\\b(func)\\b",
			"beginCaptures": {
				"1": {"name": "storage.function.helios"}
			},
			"end": "}",
			"endCaptures": {
				"0": {"name": "group.braces.func.helios"}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "[a-zA-Z][a-zA-Z0-9_]*\\b",
					"beginCaptures": {
						"0": {"name": "variable.other.function.helios"}
					},
					"end": "(?=})",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include" : "#func-definition"
						}
					]
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"include": "#assignment"
				},
				{
					"include": "#non-assignment"
				}
			]
		},
		"non-assignment": {
			"patterns": [
				{
					"include": "#literals"
				},
				{
					"include": "#operators"	
				},
				{
					"include": "#func-expression"
				},
				{
					"include": "#parentheses"
				},
				{
					"include": "#if-else"
				},
				{
					"include": "#switch"
				},
				{
					"match": "\\b(assert|error|print)\\b",
					"name": "support.function.helios"
				},
				{
					"match": "\\b(self)\\b",
					"name": "variable.language.helios"
				},
				{
					"include": "#literal-constructor"
				},
				{
					"include": "#associated-member"
				},
				{
					"include": "#parametric-type"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "string.quoted.double.helios",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
						  "name": "constant.character.escape.helios",
						  "match": "\\\\."
						}
					]
				},
				{
					"name": "constant.numeric.decimal.helios",
					"match": "\\b[0-9]+"
				},
				{
					"name": "constant.character.helios",
					"match": "#[a-f0-9]*"
				},
				{
					"name": "constant.language.boolean.helios",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"operators": {
			"patterns": [
				{
			        "name": "keyword.operator.comparison.helios",
			        "match": "(<=|>=|==|!=|<|>)"
				},
				{
				    "name": "keyword.operator.logical.helios",
				    "match": "(&&|\\|\\|)"
				},
				{
				    "name": "keyword.operator.math.helios",
				    "match": "(\\+|\\-|/|\\*)"
				},
				{
				    "name": "keyword.operator.semicolon.helios",
				    "match": ";"
				},
				{
					"name": "keyword.operator.dot.helios",
					"match": "\\."
				},
				{
					"match": "\\b[_]\\b",
					"name": "keyword.operator.underscore.helios"
				},
				{
				    "name": "keyword.operator.darrow.helios",
				    "match": "=>"
				}
			]
		},
		"if": {
			"begin": "\\b(if)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.other.branch.helios"}
			},
			"end": "}",
			"endCaptures": {
				"0": {"name": "group.braces.branch.helios"}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"name": "group.parentheses.branch.condition.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"begin": "\\{",
					"end": "(?=})",
					"name": "group.parentheses.branch.body.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"else": {
			"begin": "\\b(else)\\b",
			"beginCaptures": {
				"1": {"name": "keyword.other.branch.helios"}
			},
			"end": "}",
			"endCaptures": {
				"0": {"name": "group.braces.branch.helios"}
			},
			"patterns": [
				{
					"match": "\\b(if)\\b",
					"name": "keyword.other.branch.helios"
				},
				{
					"include": "#comments"
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"name": "group.parentheses.branch.condition.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"begin": "\\{",
					"end": "(?=})",
					"name": "group.parentheses.branch.body.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"if-else": {
			"patterns": [
				{
					"include": "#if"
				},
				{
					"include": "#else"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"match": "[a-zA-Z][a-zA-Z0-9_]*",
					"name": "entity.name.type.helios"
				}
			]
		},
		"parentheses": {
			"begin": "\\(",
			"end": "\\)",
			"name": "group.parentheses.helios",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#non-assignment"
				},
				{
					"begin": ":",
					"beginCaptures": {
						"0": {"name": "keyword.operator.colon.helios"}
					},
					"end": "([\\,])|(?=[\\)])",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"switch": {
			"name": "switch.helios",
			"begin": "\\b(switch)\\s*\\{",
			"beginCaptures": {
				"1": {"name": "keyword.other.helios"}
			},
			"end": "}",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "(else|_)\\s*(?=(=>))",
					"captures": {
						"1": {"name": "keyword.other.else.helios"}
					}
				},
				{
					"match": "([a-zA-Z][a-zA-Z0-9_]*\\s*(:)\\s*)?(Map)\\[(Data)](Data)\\s*(?=(=>))",
					"captures": {
						"1": {"name": "variable.other.assignment.helios"},
						"2": {"name": "keyword.operator.colon.helios"},
						"3": {"name": "entity.name.type.helios"},
						"4": {"name": "entity.name.type.helios"},
						"5": {"name": "entity.name.type.helios"}
					}
				},
				{
					"match": "([a-zA-Z][a-zA-Z0-9_]*\\s*(:)\\s*)?\\[](Data)\\s*(?=(=>))",
					"captures": {
						"2": {"name": "keyword.operator.colon.helios"},
						"3": {"name": "entity.name.type.helios"}
					}
				},
				{
					"match": "([a-zA-Z][a-zA-Z0-9_]*\\s*(:)\\s*)?([a-zA-Z][a-zA-Z0-9_]*)\\s*(?=(=>))",
					"captures": {
						"2": {"name": "keyword.operator.colon.helios"},
						"3": {"name": "entity.name.type.helios"}
					}
				},
				{
					"begin": "([a-zA-Z][a-zA-Z0-9_]*\\s*(:))?([a-zA-Z][a-zA-Z0-9_]*)\\s*\\{",
					"beginCaptures": {
						"1": {"name": "variable.other.assignment.helios"},
						"2": {"name": "keyword.operator.colon.helios"},
						"3": {"name": "entity.name.type.helios"}
					},
					"end": "}\\s*(?=(=>))",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#destructuring"
						}
					]
				},
				{
					"begin": "(=>)\\s*\\{",
					"beginCaptures": {
						"1": {"name": "keyword.operator.darrow.switch.helios"}
					},
					"end": "}",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#expressions"
						}
					]
				},
				{
					"begin": "(=>)",
					"beginCaptures": {
						"1": {"name": "keyword.operator.darrow.switch.helios"}
					},
					"end": "([,]|(?=}))",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"destructuring": {
			"patterns": [
				{
					"begin": "([a-zA-Z][a-zA-Z0-9_]*)\\s*((:)\\s*([a-zA-Z][a-zA-Z0-9_]*)\\s*((::)\\s*([a-zA-Z][a-zA-Z0-9_]*))?)?\\s*\\{",
					"beginCaptures": {
						"1": {"name": "variable.other.assignment.helios"},
						"3": {"name": "keyword.operator.colon.helios"},
						"4": {"name": "entity.name.type.helios"},
						"6": {"name": "keyword.operator.dcolon.helios"},
						"7": {"name": "entity.name.type.helios"}
					},
					"end": "}",
					"patterns": [
						{
							"include": "#destructuring"
						}
					]
				},
				{
					"match": "([a-zA-Z][a-zA-Z0-9_]*)\\s*((:)\\s*([a-zA-Z][a-zA-Z0-9_]*)\\s*((::)\\s*([a-zA-Z][a-zA-Z0-9_]*))?)?",
					"captures": {
						"1": {"name": "variable.other.assignment.helios"},
						"3": {"name": "keyword.operator.colon.helios"},
						"4": {"name": "entity.name.type.helios"},
						"6": {"name": "keyword.operator.dcolon.helios"},
						"7": {"name": "entity.name.type.helios"}
					}
				},
				{
					"match": "_",
					"name": "keyword.operator.underscore.helios"
				}
			]
		},
		"associated-member": {
			"match": "([a-zA-Z][a-zA-Z0-9_]*)?(\\[([a-zA-Z][a-zA-Z0-9_]*)?\\])?([a-zA-Z][a-zA-Z0-9_]*)(::)",
			"captures": {
				"1": {"name": "entity.name.type.helios"},
				"3": {"name": "entity.name.type.helios"},
				"4": {"name": "entity.name.type.helios"},
				"5": {"name": "keyword.operator.dcolon.helios"}
			},
			"name": "associated.member.helios"
		},
		"parametric-type": {
			"match": "([a-zA-Z][a-zA-Z0-9_]*)\\[([a-zA-Z][a-zA-Z0-9_]*)\\]",
			"captures": {
				"1": {"name": "entity.name.type.helios"},
				"2": {"name": "entity.name.type.helios"}
			}
		},
		"literal-constructor": {
			"begin": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\{)",
			"beginCaptures": {
				"1": {"name": "entity.name.type.helios"}
			},
			"end": "}",
			"endCaptures": {
				"0": {"name": "group.braces.close.literal.helios"}
			},
			"name": "literal.constructor.helios",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "\\{",
					"end": "(?=})",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"assignment": {
			"patterns": [
				{
					"include": "#multi-assign"
				},
				{
					"include": "#assignment-with-type"
				},
				{
					"include": "#assignment-without-type"
				}
			]
		},
		"multi-assign": {
			"begin": "(?=(\\([\\S\\s]+\\)\\s*(=))(?![=>]))",
			"end": "\\b",
			"name": "multi.assign.lhs.helios",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "\\(",
					"end": "(?=\\))",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#multi-assign-args"
						}
					]
				},
				{
					"begin": "\\(",
					"end": "=",
					"patterns": [
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"assignment-with-type": {
			"begin": "([a-zA-Z][a-zA-Z0-9_]*)\\s*(:)(?!:)",
			"beginCaptures": {
				"1": {"name": "variable.other.assignment.helios"},
				"2": {"name": "keyword.operator.colon.helios"}
			},
			"end": "=",
			"endCaptures": {
				"0": {"name": "keyword.operator.assignment.helios"}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#types"
				}
			]
		},
		"assignment-without-type": {
			"begin": "([a-zA-Z][a-zA-Z0-9_]*)\\s*(=)(?![=>])",
			"beginCaptures": {
				"1": {"name": "variable.other.assignment.helios"},
				"2": {"name": "keyword.operator.assignment.helios"}
			},
			"end": "\\b"
		},
		
		"func-expression": {
			"begin": "(?=\\([\\s\\S]*\\)\\s*\\->)",
			"end": "}",
			"endCaptures": {
				"0": {"name": "group.braces.func.helios"}
			},
			"name": "expression.func.helios",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#func-definition"
				}
			]
		},
		"func-definition": {
			"begin": "(?=(\\([\\s\\S]*\\)\\s*\\->))",
			"end": "(?=})",
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"endCaptures": {
						"0": {"name": "group.parentheses.func.args.helios"}
					},
					"patterns": [
						{
							"include": "#func-args"
						}
					]
				},
				{
					"begin": "\\->",
					"beginCaptures": {
						"0": {"name": "keyword.operator.arrow.helios"}
					},
					"end": "(?=\\{)",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#types"
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {"name": "group.braces.open.func.helios"}
					},
					"end": "(?=})",
					"name": "func.definition.body.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#expressions"
						}
					]
				}
			]
		},
		"func-args": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "\\b(self)\\b",
					"name": "variable.language.helios"
				},
				{
					"match": "\\b[_]\\b",
					"name": "keyword.operator.underscore.helios"
				},
				{
					"begin": "[a-zA-Z][a-zA-Z0-9_]*",
					"beginCaptures": {
						"0": {"name": "variable.other.function.helios"}
					},
					"end": "(?=:)"
				},
				{
					"begin": ":",
					"beginCaptures": {
						"0": {"name": "keyword.operator.colon.helios"}
					},
					"end": "(([\\,])|(?=[\\)]))",
					"name": "statement.func.arg.type.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#types"
						}
					]
				}
			]
		},
		"multi-assign-args": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "\\b[_]\\b",
					"name": "keyword.operator.underscore.helios"
				},
				{
					"begin": "[a-zA-Z][a-zA-Z0-9_]*",
					"beginCaptures": {
						"0": {"name": "variable.other.function.helios"}
					},
					"end": "(?=:)"
				},
				{
					"begin": ":",
					"beginCaptures": {
						"0": {"name": "keyword.operator.colon.helios"}
					},
					"end": "(([\\,])|(?=[\\)]))",
					"name": "statement.func.arg.type.helios",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#types"
						}
					]
				}
			]
		}
	}
}
